package geneticcodes.codeTables;import geneticcodes.AbstractGeneticCodes;import geneticcodes.OpenReadingFrame;import geneticcodes.TranslateAmino;/** * @author Wei Yuzhang * this class is to define VERTM GeneticCodes compare method * you can just call those functions to translate the genetic codes * @see com.picb.eg.main.gui.cdstranslator.AbstractGeneticCodes *  */public class VERTM_GeneticCodes extends AbstractGeneticCodes{		/**     * collect the geneticCodes method to array, each one stand for a kind of signal     */	private String[][] VERTMGeneGroup = {{"GCA","GCG","GCC","GCT"}, {"TGC","TGT"}, {"GAC","GAT"}, {"GAA","GAG"}, 			{"TTC","TTT"}, {"GGA","GGG","GGC","GGT"}, {"CAC","CAT"}, {"ATA","ATC","ATT"}, 			{"AAA","AAG"}, {"CTA","CTG","CTC","CTT","TTA","TTG"}, {"ATG"}, {"AAC","AAT"}, 			{"CCA","CCG","CCC","CCT"}, {"CAA","CAG"}, {"CGA","CGG","CGC","CGT"}, 			{"TCT","TCC","TCG","TCA","AGT","AGC"}, {"ACT","ACC","ACG","ACA"}, {"GTA","GTG","GTC","GTT"}, 			{"TGA","TGG"}, {"TAC","TAT"}, {"TAA","TAG","AGA","AGG"}};		public VERTM_GeneticCodes(){		name = "VERTM";	}		 /**     *      * @param seq     * @return translate(seq, new OpenReadingFrame(), false)     *      */	public String[] translate(String seq){		return translate(seq, new OpenReadingFrame(), false);	}		 /**     *      * @param seq singleCh_aa     * @return translate(seq, new OpenReadingFrame(), singleCh_aa)     *      */	public String[] translate(String seq, OpenReadingFrame orf){		return translate(seq, orf, false);	}		 /**     *      * @param seq singleCh_aa     * @return translate(seq, new OpenReadingFrame(), singleCh_aa)     *      */	public String[] translate(String seq, boolean singleCh_aa){		return translate(seq, new OpenReadingFrame(), singleCh_aa);	}		 /**     *      * @param seq orf singleCh_aa     * @return result     *      */	public String[] translate(String seq, OpenReadingFrame orf, boolean singleCh_aa){		String correctSeq = seq;//new DataCorrect().Correct(seq);		String choosenSeq = "";		if(orf != null){			for(int i=0;i<orf.getSection().length;i++){				if(orf.getSection()[i][1]+1 <= correctSeq.length()){					choosenSeq = choosenSeq + correctSeq.substring(orf.getSection()[i][0], orf.getSection()[i][1]+1);				}				else{					choosenSeq = choosenSeq + correctSeq.substring(orf.getSection()[i][0], correctSeq.length());				}			}		}		else{			choosenSeq = correctSeq;		}				String[] tempAmino;		if(choosenSeq.length()%3 == 0){			tempAmino = new String[choosenSeq.length()/3];		}		else{			tempAmino = new String[(choosenSeq.length()-choosenSeq.length()%3)/3+1];		}		for(int i=0;i<tempAmino.length;i++){			if(i == tempAmino.length-1){				tempAmino[i] = choosenSeq.substring(3*i);			}			else{				tempAmino[i] = choosenSeq.substring(3*i, 3*i+3);			}		}				String[][] tempResult = new TranslateAmino().parse(tempAmino, VERTMGeneGroup);		String[] result = new String[tempResult.length];		if(singleCh_aa == true){			for(int i=0;i<tempResult.length;i++){				result[i] = tempResult[i][0];			}			return result;		}		else{			for(int i=0;i<tempResult.length;i++){				result[i] = tempResult[i][1];			}			return result;		}	}}