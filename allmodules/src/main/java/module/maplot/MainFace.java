package module.maplot;

import java.awt.BorderLayout;

import javax.swing.JScrollPane;
import javax.swing.JSplitPane;

import egps2.utils.common.util.SaveUtil;
import egps2.frame.ModuleFace;
import module.maplot.maplot.gui.LeftToolJPanel;
import module.maplot.maplot.gui.MA_PlotDrawProperties;
import module.maplot.maplot.gui.MA_PlotPanel;
import module.maplot.maplot.gui.VOICM4MAPlot;
import egps2.modulei.IInformation;
import egps2.modulei.IModuleLoader;

@SuppressWarnings("serial")
public class MainFace extends ModuleFace{
	private MA_PlotDrawProperties drawProperties;
	private JSplitPane mainSplitPane;
	private LeftToolJPanel leftToolJPanel;
	private MA_PlotPanel ma_PlotPanel;
	private JScrollPane jScrollPane;
	
	private final String[] FEATURES = new String[] {
			"Make Data transformation",
			"Show plot data",
			"Change point size",
			"Show significant line",
			"Export significant genes",
	};

	/**
	 * 使用 initialize方法初始化界面
	 * @param moduleLoader
	 */
	MainFace(IModuleLoader moduleLoader) {
		super(moduleLoader);
		setLayout(new BorderLayout());
//		add(ma_PlotMain, BorderLayout.CENTER);
	}

	@Override
	public boolean closeTab() {
		return false;
	}

	@Override
	public void changeToThisTab() {
		
	}


	@Override
	public boolean canImport() {
		return true;
	}

	@Override
	public void importData() {
		VOICM4MAPlot voicm4maPlot = new VOICM4MAPlot(this);
		voicm4maPlot.doUserImportAction();
		
	}

	@Override
	public boolean canExport() {
		return true;
	}

	@Override
	public void exportData() {
		new SaveUtil().saveData(getRightTabbedPanel());
	}

	@Override
	public void initializeGraphics() {
		importData();
	}

	@Override
	public String[] getFeatureNames() {
		return FEATURES;
	}
	
	/**
	 * 指示调用了模块的哪个特性
	 * @param index
	 */
	public void invokeTheFeatureOfIndex(int index) {
		if (index >= FEATURES.length) {
			throw new IllegalArgumentException("The index out of features array bound.");
		}
		
		recordFeatureUsed4user(FEATURES[index]);
	}
	
	public void initialize(MA_PlotDrawProperties drawProperties) {
		this.drawProperties = drawProperties;
		add(getMainSplitPane(), BorderLayout.CENTER);
	}

	private JSplitPane getMainSplitPane() {
		if (mainSplitPane == null) {
			mainSplitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);
			mainSplitPane.setOneTouchExpandable(true);
			mainSplitPane.setContinuousLayout(false);
			mainSplitPane.setDividerSize(7);
			mainSplitPane.add(getLeftToolJPanel());
			mainSplitPane.add(getRightTabbedPanel());
		}
		return mainSplitPane;
	}

	private LeftToolJPanel getLeftToolJPanel() {
		if (leftToolJPanel == null) {
			leftToolJPanel = new LeftToolJPanel(this);
			drawProperties.setLeftToolJPanel(leftToolJPanel);
		}

		return leftToolJPanel;
	}

	public JScrollPane getRightTabbedPanel() {
		if (ma_PlotPanel == null) {
			ma_PlotPanel = new MA_PlotPanel(drawProperties);
			jScrollPane = new JScrollPane(ma_PlotPanel);
			
			jScrollPane.setBorder(null);
		}
		return jScrollPane;
	}

	public MA_PlotDrawProperties getMA_PlotDrawProperties() {

		return drawProperties;
	}


	@Override
	public IInformation getModuleInfo() {
		IInformation iInformation = new IInformation() {
			@Override
			public String getHowUserOperates() {
				LeftToolJPanel leftToolJPanel2 = getLeftToolJPanel();
				String theUserOperatedOptions = leftToolJPanel2.getTheUserOperatedOptions();
				return theUserOperatedOptions;
			}
			@Override
			public String getWhatDataInvoked() {
				return "Data is imported from the VOICM input dialog.";
			}
			@Override
			public String getSummaryOfResults() {
				return "The MA-plot with color coding is generated by the eGPS software.";
			}};
		return iInformation;
	}
}
