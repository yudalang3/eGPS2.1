package module.remnant.datapanel;import java.awt.BorderLayout;import java.awt.Color;import java.awt.datatransfer.DataFlavor;import java.awt.datatransfer.Transferable;import java.io.File;import java.util.Arrays;import java.util.List;import javax.swing.JComponent;import javax.swing.JFileChooser;import javax.swing.JPanel;import javax.swing.SwingUtilities;import javax.swing.TransferHandler;import javax.swing.border.BevelBorder;import egps2.panels.dialog.EGPSFileChooser;import egps2.panels.dialog.SwingDialog;import egps2.utils.common.model.filefilter.OpenFilterVcf;import module.remnant.datapanel.data.IDataCenter;import egps2.frame.ModuleFace;import egps2.modulei.IModuleLoader;/** *  * The main entry Panel! *  * @author ydl;lhp * @date 2019-01-01 * @modify 2024-04-02 * @version 1.0 * @category ViewPanel * */@SuppressWarnings("serial")public class DefaultPanel extends ModuleFace {	private LeftDataInputArea controller_DataFile;	private MiddleInformationArea middleInformationArea;	private RightSuitableMethodsArea controller_AvailableMethodsView;	private MyDataEventManager myDataEventManager;	private IDataCenter dataCenter;	public DefaultPanel() {		this(null);	}	public DefaultPanel(IModuleLoader loader) {		super(loader);						setLayout(new BorderLayout());		setBackground(Color.white);		myDataEventManager = new MyDataEventManager(this);		initializeViewPanels();		// 初始化 文件的drop		TransferHandler handler = new TransferHandler() {			private static final long serialVersionUID = -4150862270065460548L;			@Override			public int getSourceActions(JComponent c) {				// 我不知道为什么，貌似这个不起作用！！！！				return TransferHandler.LINK;			}			@Override			public boolean canImport(TransferSupport info) {				// we only import FileList				if (!info.isDataFlavorSupported(DataFlavor.javaFileListFlavor)) {					return false;				}				return true;			}			@Override			public boolean importData(TransferSupport info) {				if (!info.isDrop()) {					return false;				}				// Check for FileList flavor				if (!info.isDataFlavorSupported(DataFlavor.javaFileListFlavor)) {					SwingDialog.showErrorMSGDialog("Input error", "The eGPS doesn't support a drop of this type.");					return false;				}				// Get the fileList that is being dropped.				Transferable t = info.getTransferable();				List<File> data;				try {					data = (List<File>) t.getTransferData(DataFlavor.javaFileListFlavor);				} catch (Exception e) {					return false;				}				// 得到文件之后，执行的动作！				// 注意，我把这个动作重新开启了一个线程，因为在这里，它会吞掉所有异常，而我想把它抛出！！				new Thread(() -> {					myDataEventManager.handleFiles(data);				}).start();				return true;			}		};		setTransferHandler(handler);	}	private void initializeViewPanels() {		// 初始化左边的面板		JPanel bevelBorderPanel = new JPanel(new BorderLayout());		bevelBorderPanel.setBorder(new MyBevelBorder(BevelBorder.LOWERED));		bevelBorderPanel.setLayout(new BorderLayout());		add(bevelBorderPanel, BorderLayout.WEST);		controller_DataFile = new LeftDataInputArea();		bevelBorderPanel.add(controller_DataFile, BorderLayout.CENTER);		myDataEventManager.setLeftDataInputArea(controller_DataFile);		controller_DataFile.setDataEventManager(myDataEventManager);		// 初始化中间的		/* initialize yourdata's center pane! */		middleInformationArea = new MiddleInformationArea();		myDataEventManager.setMiddleInformationArea(middleInformationArea);		add(middleInformationArea, BorderLayout.CENTER);		// 初始化右边的		controller_AvailableMethodsView = new RightSuitableMethodsArea();		myDataEventManager.setRightSuitableMethodsArea(controller_AvailableMethodsView);		controller_AvailableMethodsView.setDataEventManager(myDataEventManager);		JPanel rightSubPanel = new JPanel(new BorderLayout());		// add a border style !		rightSubPanel.setBorder(new MyBevelBorder(BevelBorder.LOWERED));		rightSubPanel.add(controller_AvailableMethodsView, BorderLayout.CENTER);		add(rightSubPanel, BorderLayout.EAST);	}	public LeftDataInputArea getControllerDataFile() {		return controller_DataFile;	}	public RightSuitableMethodsArea getControllerAvailableMethodsView() {		return controller_AvailableMethodsView;	}	/**	 * remove all data	 *///	public void closeData() {//		//		if (myDataEventManager.getDataCenter().getInputFiles().size() == 0) {//			SwingDialog.showErrorMSGDialog("No Data", "You haven't input data yet, please import data!");//			return;//		}//		//		int res = JOptionPane.showConfirmDialog(bioMainFrame, "Confirm to remove all data?", "Confirm",//				JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);//		if (res == JOptionPane.OK_OPTION) {//			SwingUtilities.invokeLater(() ->{//				//controller_DataFile.directlyRemoveAllFiles();//			});//		}//	}	/*	 * add by muhailong when the current model is DefaultPanel, open is callable.	 */	public void openDataAction() {		EGPSFileChooser jfc = new EGPSFileChooser(getClass());		jfc.setDialogTitle("Open File(s)");		jfc.setMultiSelectionEnabled(true);		// jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);		jfc.addChoosableFileFilter(new OpenFilterVcf());//		jfc.addChoosableFileFilter(new OpenFilterSimu());//		jfc.addChoosableFileFilter(new OpenFilterList());//		jfc.addChoosableFileFilter(new OpenFilterTree());//		jfc.addChoosableFileFilter(new OpenFilterFasta());//		jfc.addChoosableFileFilter(new OpenFilterPro());//		jfc.addChoosableFileFilter(new OpenFilterMaf());//		jfc.addChoosableFileFilter(new OpenFilterRNAExp());		int result = jfc.showOpenDialog();		if (result == JFileChooser.APPROVE_OPTION) {			File[] files = jfc.getSelectedFiles();			if (files != null && files.length > 0) {				SwingUtilities.invokeLater(() -> {					myDataEventManager.handleFiles(Arrays.asList(files));				});				jfc.setCurrentDirectory(files[0].getParentFile());			}		}	}	public MyDataEventManager getMyDataEventManager() {		return myDataEventManager;	}		public void setDataCenter(IDataCenter dataCenter) {		this.dataCenter = dataCenter;	}	public IDataCenter getDataCenter() {		return dataCenter;	}	@Override	public void changeToThisTab() {	}	@Override	public boolean canImport() {		return true;	}	@Override	public void importData() {		openDataAction();	}	@Override	public boolean canExport() {		return false;	}	@Override	public void exportData() {			}	@Override	public String[] getFeatureNames() {		return null;	}	@Override	protected void initializeGraphics() {			}}