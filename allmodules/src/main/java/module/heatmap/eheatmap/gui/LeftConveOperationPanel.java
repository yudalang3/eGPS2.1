package module.heatmap.eheatmap.gui;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import javax.swing.JButton;import javax.swing.JComponent;import javax.swing.JPanel;import egps2.utils.common.util.EGPSShellIcons;import module.heatmap.EheatmapMain;import module.heatmap.eheatmap.HeatmapController;import module.heatmap.eheatmap.model.AnnotaionParaObj;import module.heatmap.eheatmap.model.ParameterModel;import module.heatmap.images.HeatmapImageObtainer;import egps2.panels.reusablecom.ParameterInitialized;public class LeftConveOperationPanel extends JPanel implements ParameterInitialized {	private static final long serialVersionUID = 5888946141906274755L;	private EheatmapMain eheatmapMain;	private HeatmapController controller;	private JButton recoverJButton;	public LeftConveOperationPanel(EheatmapMain main) {		this.eheatmapMain = main;		//		setLayout(new MigLayout( "center"));		add(getAutoSizeButton());		add(getResetAllButton());		add(getTransposeButton());		add(getSaveButton());		JButton recoverButton = getRecoverButton();		recoverButton.setEnabled(false);		add(recoverButton);		add(getAddTreeButtoon());	}	public HeatmapController getController() {		if (controller == null) {			controller = eheatmapMain.getController();		}		return controller;	}	private JButton getAutoSizeButton() {		JButton autoSizeButton = new JButton();		autoSizeButton.setHorizontalTextPosition(0);		autoSizeButton.setVerticalTextPosition(3);		autoSizeButton.setToolTipText(				"<html><body>Autosize to fit the drawing panel. <br> Note: If you zoom in the graph before,please zoom out first.");		autoSizeButton.setIcon(EGPSShellIcons.get("auto-size.png"));		autoSizeButton.addActionListener(new ActionListener() {			@Override			public void actionPerformed(ActionEvent e) {				getController().strongestRefreshHeatmapAndRecoverDim();			}		});		return autoSizeButton;	}	private JButton getResetAllButton() {		JButton ResetAllButton = new JButton();		ResetAllButton.setHorizontalTextPosition(0);		ResetAllButton.setVerticalTextPosition(3);		ResetAllButton.setToolTipText(				"<html><body>Reset all parameters, turn to default status!<br>Hierarchical clusters will not influenceÔºÅ");		ResetAllButton.setIcon(HeatmapImageObtainer.get("reset settings.png"));		ResetAllButton.addActionListener(new ActionListener() {			@Override			public void actionPerformed(ActionEvent e) {				getController().reSetAllParameters();			}		});		return ResetAllButton;	}	private JButton getTransposeButton() {		transposeButton = new JButton();		transposeButton.setHorizontalTextPosition(0);		transposeButton.setVerticalTextPosition(3);		transposeButton.setToolTipText(				"Tranospose current matrix. Note: this will only have effects when no gaps and annotaions!");		transposeButton.setIcon(HeatmapImageObtainer.get("transpose.png"));		transposeButton.addActionListener(new ActionListener() {			@Override			public void actionPerformed(ActionEvent e) {				getController().transposeData();			}		});		return transposeButton;	}	private int colorEnumIndex = 0;	private JButton transposeButton;//	private JButton getRandomColorButton() {//		JButton randomColorButton = new JButton();//		randomColorButton.setHorizontalTextPosition(0);//		randomColorButton.setVerticalTextPosition(3);//		randomColorButton.setToolTipText("Random color scheme!");//		randomColorButton.setIcon(HeatmapImageObtainer.get("random.png"));////		randomColorButton.addActionListener(new ActionListener() {//			@Override//			public void actionPerformed(ActionEvent e) {//				GradientColorHolder gColorHolder = getController().getParaModel().getgColorHolder();////				ColorEnum[] values = ColorEnum.values();////				if (colorEnumIndex == values.length) {//					colorEnumIndex = 0;//				}//				// int nextInt = random.nextInt(values.length);////				Color[] colors = values[colorEnumIndex].getColors();////				float[] dists = values[colorEnumIndex].getDists();//				colorEnumIndex++;//				gColorHolder.setColorScheme(dists, colors);//				getController().weakestRefreshHeatmap();//			}////		});//		return randomColorButton;//	}	private JButton getSaveButton() {		JButton saveParametersJButton = new JButton();		saveParametersJButton.setHorizontalTextPosition(0);		saveParametersJButton.setVerticalTextPosition(3);		saveParametersJButton.setToolTipText("Save data and parameters for recover!");		saveParametersJButton.setIcon(HeatmapImageObtainer.get("dataSave.png"));		saveParametersJButton.addActionListener(new ActionListener() {			@Override			public void actionPerformed(ActionEvent e) {				JComponent viewPanel = getController().getViewPanel();				EheatmapMain main = (EheatmapMain) viewPanel;				main.saveCurrentParaModelAndDataModel();				getRecoverButton().setEnabled(true);			}		});		return saveParametersJButton;	}	private JButton getAddTreeButtoon() {		JButton aButton = new JButton();		aButton.setHorizontalTextPosition(0);		aButton.setVerticalTextPosition(3);		aButton.setIcon(HeatmapImageObtainer.get("treeIconEheatmap.png"));		aButton.setToolTipText("Add new phylogenetic tree to left panel!");		aButton.addActionListener(new ActionListener() {			@Override			public void actionPerformed(ActionEvent e) {				EheatmapInputTreeAllDialog eheatmapInputTreeAllDialog = new EheatmapInputTreeAllDialog(getController());				eheatmapInputTreeAllDialog.setVisible(true);			}		});		return aButton;	}	private JButton getRecoverButton() {		if (recoverJButton == null) {			recoverJButton = new JButton();			recoverJButton.setHorizontalTextPosition(0);			recoverJButton.setVerticalTextPosition(3);			recoverJButton.setToolTipText("Recover the data and parameters!");			recoverJButton.setIcon(HeatmapImageObtainer.get("dataRecovery.png"));			recoverJButton.addActionListener(new ActionListener() {				@Override				public void actionPerformed(ActionEvent e) {					JComponent viewPanel = getController().getViewPanel();					EheatmapMain main = (EheatmapMain) viewPanel;					main.recoverParaModelAndDataModel();				}			});		}		return recoverJButton;	}	@Override	public void initializeParameters() {		boolean shouldTransposeEnable = judgeShouldTransposeEnable();		transposeButton.setEnabled(shouldTransposeEnable);	}	private boolean judgeShouldTransposeEnable() {		ParameterModel paraModel = getController().getParaModel();		if (paraModel.gethGapLocations().length != 0) {			return false;		}		if (paraModel.getvGapLocations().length != 0) {			return false;		}		AnnotaionParaObj annotaionParaObj = paraModel.getAnnotaionParaObj();		if (!annotaionParaObj.ifRowAnnotationEmpty()) {			return false;		}		if (!annotaionParaObj.ifColAnnotationEmpty()) {			return false;		}		return true;	}	@Override	public void addListeners() {	}	@Override	public void removeListeners() {	}}