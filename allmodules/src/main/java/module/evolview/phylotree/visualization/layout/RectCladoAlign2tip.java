package module.evolview.phylotree.visualization.layout;import java.util.List;import module.evolview.gfamily.work.gui.tree.PhylogeneticTreePanel;import module.evolview.gfamily.work.gui.tree.TreeOperationUtil;import module.evolview.model.tree.GraphicsNode;import module.evolview.model.tree.TreeLayoutProperties;public class RectCladoAlign2tip extends RectPhyloLayout {	public RectCladoAlign2tip(TreeLayoutProperties controller, GraphicsNode rootNode,PhylogeneticTreePanel phylogeneticTreePanel) {		super(controller, rootNode,phylogeneticTreePanel);	}		@Override	public void calculateForPainting(int width, int height) {			// 让所有的枝长都一样！		TreeOperationUtil.recursiveIterateTreeIF(rootNode, node -> {			if (node.getParentCount() == 0) {				node.setDisplayedBranchLength(0);			}else {				node.setDisplayedBranchLength(0.1);			}		});		super.calculateForPainting(width, height);		// 恢复枝长,并把叶子的x替换						TreeOperationUtil.recursiveIterateTreeIF(rootNode, node -> {			node.setDisplayedBranchLength(node.getRealBranchLength());						if (node.getChildCount() == 0) {				node.setXSelf(currentWidth - blankArea.getRight());			}		});		this.scaleBarProperty.setIfDrawScaleBar(false);	}	@Override	protected double getRightMostXLocation(List<GraphicsNode> leaves) {		double ret = currentWidth - blankArea.getRight();				if (treeLayoutProperties.getShowLeafPropertiesInfo().isShowLeafLabel()) {			ret += getMaxLengthLeafNameWidthAccording2CurrentFont();		}else {			ret += 15;		}		return ret;	}		@Override	protected double getRightMostXLocation4node2leafAnno(List<GraphicsNode> t) {		return currentWidth - blankArea.getRight();	}}