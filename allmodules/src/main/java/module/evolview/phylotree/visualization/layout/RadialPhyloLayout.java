package module.evolview.phylotree.visualization.layout;import java.awt.Graphics2D;import java.awt.Point;import java.awt.geom.Arc2D;import java.awt.geom.Point2D.Double;import java.util.LinkedList;import java.util.List;import java.util.function.Function;import module.evolview.phylotree.visualization.graphics.struct.TreeDecideUtil;import evoltree.struct.util.EvolNodeUtil;import module.evolview.gfamily.work.gui.DrawUtil;import module.evolview.gfamily.work.gui.tree.PhylogeneticTreePanel;import module.evolview.gfamily.work.gui.tree.annotation.DrawPropInternalNode2LeafAnno;import module.evolview.gfamily.work.gui.tree.annotation.DrawPropInternalNodeInsituAnno;import module.evolview.gfamily.work.gui.tree.annotation.DrawPropOutterSidewardAnno;import module.evolview.gfamily.work.gui.tree.annotation.OutterSidewardLocation;import module.evolview.phylotree.visualization.graphics.struct.NodeType;import module.evolview.model.tree.AnnotationsProperties;import module.evolview.model.tree.GraphicsNode;import module.evolview.model.tree.TreeLayoutProperties;import module.evolview.phylotree.visualization.graphics.struct.util.GraphicTreePropertyCalculator;import graphic.engine.guicalculator.GuiCalculator;public class RadialPhyloLayout extends RadicalLayout {	/* the circleCenter of the circle */	protected Point circleCenter = new Point(0, 0);	public RadialPhyloLayout(TreeLayoutProperties controller, GraphicsNode rootNode,			PhylogeneticTreePanel phylogeneticTreePanel) {		super(controller, rootNode, phylogeneticTreePanel);		linageTypeSidewardAnnotationCalculator = new Function<LinkedList<GraphicsNode>, OutterSidewardLocation>() {			@Override			public OutterSidewardLocation apply(LinkedList<GraphicsNode> t) {				GraphicsNode firstLeaf = t.getFirst();				GraphicsNode lastLeaf = t.getLast();				GraphicsNode mrca = GraphicTreePropertyCalculator.getMostRecentCommonAnsester(firstLeaf, lastLeaf);				double centerX = mrca.getXSelf();				double centerY = mrca.getYSelf();				double lastXSelf = 0;				double lastYSelf = 0;				double firstXSelf = 0;				double firstYSelf = 0;				if (firstLeaf == lastLeaf) {					lastXSelf = lastLeaf.getXSelf();					lastYSelf = lastLeaf.getYSelf();					firstXSelf = lastXSelf + 5;					firstYSelf = lastYSelf + 5;				} else {					lastXSelf = lastLeaf.getXSelf();					lastYSelf = lastLeaf.getYSelf();					firstXSelf = firstLeaf.getXSelf();					firstYSelf = firstLeaf.getYSelf();				}				double radicusForAnnotation = getRadicusForAnnotation(t.toArray(new GraphicsNode[1]), centerX, centerY);				Arc2D.Double arc1 = new Arc2D.Double();				arc1.setFrameFromCenter(centerX, centerY, centerX + radicusForAnnotation,						centerY + radicusForAnnotation);				arc1.setAngles(lastXSelf, lastYSelf, firstXSelf, firstYSelf);				double startDeg = arc1.getAngleStart();				double extentDeg = arc1.getAngleExtent();				Double point = GuiCalculator.calculateCircularLocation(startDeg + 0.5 * extentDeg - 1,						radicusForAnnotation + 20, centerX, centerY);				OutterSidewardLocation ret = new OutterSidewardLocation();				ret.setShape(arc1);				ret.setTextX((float) point.x);				ret.setTextY((float) point.y);				return ret;			}		};		linageTypeNode2LeafAnnotationCalculator = new Function<LinkedList<GraphicsNode>, OutterSidewardLocation>() {			@Override			public OutterSidewardLocation apply(LinkedList<GraphicsNode> t) {				GraphicsNode firstLeaf = t.getFirst();				GraphicsNode lastLeaf = t.getLast();				GraphicsNode mrca = GraphicTreePropertyCalculator.getMostRecentCommonAnsester(firstLeaf, lastLeaf);				double centerX = mrca.getXSelf();				double centerY = mrca.getYSelf();				double lastXSelf = 0;				double lastYSelf = 0;				double firstXSelf = 0;				double firstYSelf = 0;				if (firstLeaf == lastLeaf) {					lastXSelf = lastLeaf.getXSelf();					lastYSelf = lastLeaf.getYSelf();					firstXSelf = lastXSelf + 5;					firstYSelf = lastYSelf + 5;				} else {					lastXSelf = lastLeaf.getXSelf();					lastYSelf = lastLeaf.getYSelf();					firstXSelf = firstLeaf.getXSelf();					firstYSelf = firstLeaf.getYSelf();				}				double radicusForAnnotation = getRadicusForAnnotation(t.toArray(new GraphicsNode[1]), centerX, centerY);				Arc2D.Double arc1 = new Arc2D.Double(Arc2D.PIE);				arc1.setFrameFromCenter(centerX, centerY, centerX + radicusForAnnotation,						centerY + radicusForAnnotation);				arc1.setAngles(lastXSelf, lastYSelf, firstXSelf, firstYSelf);				double startDeg = arc1.getAngleStart();				double extentDeg = arc1.getAngleExtent();				// arc1.setArcByCenter(centerX, centerY, radicusForAnnotation, startDeg - 5,				// extentDeg+5, Arc2D.PIE);				arc1.setAngleStart(startDeg - 5);				arc1.setAngleExtent(extentDeg + 10);				Double point = GuiCalculator.calculateCircularLocation(startDeg + 0.5 * extentDeg - 1,						radicusForAnnotation + 20, centerX, centerY);				OutterSidewardLocation ret = new OutterSidewardLocation();				ret.setShape(arc1);				ret.setTextX((float) point.x);				ret.setTextY((float) point.y);				return ret;			}		};	}	@Override	protected void beforeCalculate(int width, int height) {		super.beforeCalculate(width, height);//		if (treeLayoutProperties.isShowOutgroup()) {//			rightHorizontalBlank = rightHorizontalBlank + 80;//		}		int workHeight = blankArea.getWorkHeight(height);		int workWidth = blankArea.getWorkWidth(width);		canvas2logicRatio = Math.min(workHeight, workWidth)				/ (2 * GraphicTreePropertyCalculator.getMaxLengthOfRoot2Leaf(rootNode).getLength());		circleCenter.setLocation(currentWidth / 2, currentHeight / 2);	}	@Override	public void calculateForPainting(int width, int height) {		if (rootNode.getSize() < 4) {			EvolNodeUtil.initializeSize(rootNode);		}		beforeCalculate(width, height);		recursizeCalculate(rootNode, 0, 2 * Math.PI);		int radicalLayoutRotationDeg = treeLayoutProperties.getRadicalLayoutRotationDeg();		if (radicalLayoutRotationDeg != 0) {			DrawUtil.rotationTransform(rootNode, radicalLayoutRotationDeg, currentWidth, currentHeight);		}		afterCalculation();	}	@Override	protected void configurateMainAnnotation(AnnotationsProperties annotationsProperties) {		List<DrawPropInternalNode2LeafAnno> internalNode2LeafAnnos = annotationsProperties.getInternalNode2LeafAnnos();		for (DrawPropInternalNode2LeafAnno tt : internalNode2LeafAnnos) {			if (tt.shouldConfigurateAndPaint()) {				GraphicsNode currentGraphicsNode = tt.getCurrentGraphicsNode();				List<GraphicsNode> leaves = GraphicTreePropertyCalculator.getLeaves(currentGraphicsNode);				GraphicsNode firstLeaf = leaves.get(0);				GraphicsNode lastLeaf = leaves.get(leaves.size() - 1);				GraphicsNode mrca = GraphicTreePropertyCalculator.getMostRecentCommonAnsester(firstLeaf, lastLeaf);				double centerX = mrca.getXSelf();				double centerY = mrca.getYSelf();				double lastXSelf = 0;				double lastYSelf = 0;				double firstXSelf = 0;				double firstYSelf = 0;				if (firstLeaf == lastLeaf) {					lastXSelf = lastLeaf.getXSelf();					lastYSelf = lastLeaf.getYSelf();					firstXSelf = lastXSelf + 5;					firstYSelf = lastYSelf + 5;				} else {					lastXSelf = lastLeaf.getXSelf();					lastYSelf = lastLeaf.getYSelf();					firstXSelf = firstLeaf.getXSelf();					firstYSelf = firstLeaf.getYSelf();				}				double radicusForAnnotation = getRadicusForAnnotation(leaves.toArray(new GraphicsNode[1]), centerX,						centerY);				Arc2D.Double arc1 = new Arc2D.Double(Arc2D.PIE);				arc1.setFrameFromCenter(centerX, centerY, centerX + radicusForAnnotation,						centerY + radicusForAnnotation);				arc1.setAngles(lastXSelf, lastYSelf, firstXSelf, firstYSelf);				double startDeg = arc1.getAngleStart();				double extentDeg = arc1.getAngleExtent();				Double point = GuiCalculator.calculateCircularLocation(startDeg + 0.5 * extentDeg - 1,						radicusForAnnotation + 20, centerX, centerY);				tt.setDrawShape(arc1);			}		}		// 这个注释要特殊处理		// List<DrawPropLeafNameAnno> leafNameAnnos =		// annotationsProperties.getLeafNameAnnos();		annotationsProperties.configurateLeafNamesAnnotaion(false);		List<DrawPropOutterSidewardAnno> outterSidewardAnnos = annotationsProperties.getOutterSidewardAnnos();		for (DrawPropOutterSidewardAnno tt : outterSidewardAnnos) {			if (tt.shouldConfigurateAndPaint()) {				GraphicsNode currentGraphicsNode = tt.getCurrentGraphicsNode();				List<GraphicsNode> leaves = GraphicTreePropertyCalculator.getLeaves(currentGraphicsNode);				GraphicsNode firstLeaf = leaves.get(0);				GraphicsNode lastLeaf = leaves.get(leaves.size() - 1);				GraphicsNode mrca = GraphicTreePropertyCalculator.getMostRecentCommonAnsester(firstLeaf, lastLeaf);				double centerX = mrca.getXSelf();				double centerY = mrca.getYSelf();				double lastXSelf = 0;				double lastYSelf = 0;				double firstXSelf = 0;				double firstYSelf = 0;				if (firstLeaf == lastLeaf) {					lastXSelf = lastLeaf.getXSelf();					lastYSelf = lastLeaf.getYSelf();					firstXSelf = lastXSelf + 5;					firstYSelf = lastYSelf + 5;				} else {					lastXSelf = lastLeaf.getXSelf();					lastYSelf = lastLeaf.getYSelf();					firstXSelf = firstLeaf.getXSelf();					firstYSelf = firstLeaf.getYSelf();				}				double radicusForAnnotation = getRadicusForAnnotation(leaves.toArray(new GraphicsNode[1]), centerX,						centerY);				Arc2D.Double arc1 = new Arc2D.Double();				arc1.setFrameFromCenter(centerX, centerY, centerX + radicusForAnnotation,						centerY + radicusForAnnotation);				arc1.setAngles(lastXSelf, lastYSelf, firstXSelf, firstYSelf);				double startDeg = arc1.getAngleStart();				double extentDeg = arc1.getAngleExtent();				Double point = GuiCalculator.calculateCircularLocation(startDeg + 0.5 * extentDeg - 1,						radicusForAnnotation + 20, centerX, centerY);				tt.setTextLocationAndShape(currentGraphicsNode.getXSelf(), currentGraphicsNode.getYSelf(), arc1);			}		}		List<DrawPropInternalNodeInsituAnno> internalNode2LeafInsituAnnos = annotationsProperties				.getInternalNode2LeafInsituAnnos();		for (DrawPropInternalNodeInsituAnno tt : internalNode2LeafInsituAnnos) {			if (tt.shouldConfigurateAndPaint()) {				tt.configurate();			}		}	}	/**	 * 	 * @param node	 * @param lowAngleRadians  : 初始是 0	 * @param highAngleRadians : 初始是 2* pi	 */	protected void recursizeCalculate(GraphicsNode node, double lowAngleRadians, double highAngleRadians) {		NodeType nodeType = TreeDecideUtil.decideNodeType(node, rootNode);		switch (nodeType) {		case LEAF:			break;		default:			double curX = 0;			double curY = 0;			if (nodeType == NodeType.ROOT) {				double x1 = circleCenter.getX();				double y1 = circleCenter.getY();				node.setXParent(x1);				node.setYParent(y1);				node.setXSelf(x1);				node.setYSelf(y1);				curX = x1;				curY = y1;			} else {				curX = node.getXSelf();				curY = node.getYSelf();			}			double currentNodeLeafNumber = node.getSize();			double curAngle = lowAngleRadians;			for (int i = 0; i < node.getChildCount(); i++) {				GraphicsNode child = (GraphicsNode) node.getChildAt(i);				double innerChildLeafNumber = child.getSize();				double ratios = innerChildLeafNumber / currentNodeLeafNumber;				double arcSize = ratios * (highAngleRadians - lowAngleRadians);				double length = child.getDisplayedBranchLength() * canvas2logicRatio;				double midAngle = curAngle + arcSize / 2;				double newX = curX + Math.cos(midAngle) * length;				double newY = curY + Math.sin(midAngle) * length;				child.setXParent(curX);				child.setYParent(curY);				child.setXSelf(newX);				child.setYSelf(newY);				child.setAngleIfNeeded(-Math.toDegrees(midAngle));				recursizeCalculate(child, curAngle, curAngle + arcSize);				curAngle += arcSize;			}			break;		}	}	@Override	protected void specificTreeDrawingProcess(Graphics2D g2d) {	}	@Override	protected void leafLineDrawingProcess(Graphics2D g2d, GraphicsNode node) {		unRootedhorizontalLine(g2d, node);	}	@Override	protected void rootDrawingProcess(Graphics2D g2d, GraphicsNode node) {	}	@Override	protected void innerNodeDrawingProcess(Graphics2D g2d, GraphicsNode node) {		unRootedhorizontalLine(g2d, node);	}}